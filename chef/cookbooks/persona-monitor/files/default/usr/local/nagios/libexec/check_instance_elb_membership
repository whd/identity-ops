#!/usr/bin/env python2.7

import boto.ec2
import boto.ec2.elb
import boto.utils
import logging
import hashlib
import os.path
import pickle
import time
import argparse
import socket

# http://chase-seibert.github.io/blog/2011/11/23/pythondjango-disk-based-caching-decorator.html
def cache_disk(seconds = 900, cache_folder="/tmp"):
    def doCache(f):
        def inner_function(*args, **kwargs):

            # calculate a cache key based on the decorated method signature
            key = hashlib.sha1(str(f.__module__) + str(f.__name__) + str(args) + str(kwargs)).hexdigest()
            filepath = os.path.join(cache_folder, "check_instance_elb_membership.%s.pickle" % key)

            # verify that the cached object exists and is less than $seconds old
            if os.path.exists(filepath):
                modified = os.path.getmtime(filepath)
                age_seconds = time.time() - modified
                if age_seconds < seconds:
                    return pickle.load(open(filepath, "rb"))

            # call the decorated function...
            result = f(*args, **kwargs)

            # ... and save the cached object for next time
            pickle.dump(result, open(filepath, "wb"))

            return result
        return inner_function
    return doCache

@cache_disk(seconds = 60, cache_folder="/tmp")
def get_lbs():
    conn_elb = boto.ec2.elb.connect_to_region(region)
    load_balancers = conn_elb.get_all_load_balancers()
    return [{'instances': [y.id for y in x.instances], 
             'name': x.name} for x in load_balancers]

@cache_disk(seconds = 60, cache_folder="/tmp")
def get_instances():
    conn_ec2 = boto.ec2.connect_to_region(region)
    reservations = conn_ec2.get_all_instances()
    ret = []
    for reservation in reservations:
        for instance in reservation.instances:
            ret.append({'ip': instance.private_ip_address,
                        'id': instance.id})
    return ret

def type_ip(ip):
    try:
        socket.inet_aton(ip)
    except socket.error:
        raise argparse.ArgumentTypeError("%s is not a valid IP address" % ip)
    return ip

def type_percent(percent):
    percent = percent[:-1] if percent[-1] == '%' else percent
    try:
        result = float(percent)
    except:
        raise argparse.ArgumentTypeError("%s is not a percent" % percent)
    if result < 0 or result > 100:
        raise argparse.ArgumentTypeError("%s is not a percent" % percent)
    return result

def type_loglevel(level):
    try:
        result = getattr(logging, level.upper())
    except AttributeError:
        raise argparse.ArgumentTypeError("'%s' is not a valid log level. Please use %s" % \
                                         (level, [x for x in logging._levelNames.keys() if isinstance(x, str)]))
    return result

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, 
                                 description='''\
Determine what load balancers a given instance is a member of based on 
its IP and report OK if it's InService in all of its load balancers or 
report CRITICAL if it's OutOfService in any of its load balancers.

Alternatively (with the --elb-health option) determine if an instance is
OutOfService in any load balancers but only alert CRITICAL if that load
balancer has fewer than the minimum safe number or percentage of InService 
instances, otherwise alert WARNING''')
parser.add_argument('-e', '--elb-health', action='store_true',
                   help="Only alert if the instance is OutOfService *and* any of its parent ELBs fall short of the minimum safe InService instances or percentage of InService instances")
parser.add_argument('-p', '--min-percent', metavar='PERCENT', type=type_percent, default=50,
                   help='The minimum safe percentage of InService instances in an ELB (--elb-health must also be enabled) (default: 50%%)')
parser.add_argument('-m', '--min-instances', metavar='INSTANCES', type=int, default=2,
                   help='The minimum safe number of InService instances in an ELB (--elb-health must also be enabled) (default: 2)')
# Unsafe : 1 of 3 (1<2 and 33%<50%), 3 of 8 (37.5%<50%) 
parser.add_argument('-l', '--loglevel', type=type_loglevel, default='INFO',
                   help='Log level verbosity (default: INFO)')
parser.add_argument('ip', nargs=1, type=type_ip,
                   help='The IP address of the instance')
args = parser.parse_args()
logging.basicConfig(level=args.loglevel)

metadata = boto.utils.get_instance_metadata()
region = metadata['placement']['availability-zone'][:-1] if metadata is not None else 'us-west-2'

instance_id = False
for instance in get_instances():
    if instance['ip'] == args.ip[0]:
        # may want to test for multiple instances with the same IP
        instance_id = instance['id']

if not instance_id:
    print "UNKNOWN - couldn't find instance_id for %s" % args.ip[0]
    exit(3)

conn_elb = boto.ec2.elb.connect_to_region(region)
states=[]
for load_balancer in get_lbs():
    if instance_id in load_balancer['instances']:
        logging.debug('%s found in load balancer %s' % (instance_id, load_balancer['name']))
        instance_healths = conn_elb.describe_instance_health(load_balancer['name'])
        instance_health = [x for x in instance_healths if x.instance_id == instance_id]
        if len(instance_health) != 1:
            print "UNKNOWN - something wrong with instance health"
            exit(3)
        states.append({'name' : load_balancer['name'], 
                       'instance_state' : instance_health[0].state,
                       'outofservice_instances' : len([x for x in instance_healths if x.state == 'OutOfService']),
                       'inservice_instances' : len([x for x in instance_healths if x.state == 'InService']),
                       'total_instances' : len(instance_healths)})

logging.debug('state of %s is %s' % (instance_id, states))

inservice_elbs=[x for x in states if x['instance_state'] == 'InService']
outofservice_elbs=[x for x in states if x['instance_state'] == 'OutOfService']

# First 19 characters of the metric name should be unique
# http://nagiosplug.sourceforge.net/developer-guidelines.html#AEN201
stats = " ".join(["OutOfService_%(name)s=%(oval)s;%(owarn)s;%(ocrit)s;%(omin)s;%(omax)s UnHealthy_%(name)s=%(hval).0f%%;%(hwarn)s;%(hcrit)s;%(hmin)s;%(hmax)s" % \
                   {'name': x['name'],
                    'oval': x['outofservice_instances'],
                    'owarn': '',
                    'ocrit': x['total_instances'] - args.min_instances + 1,
                    'omin': 0,
                    'omax': x['total_instances'],
                    'hval': float(x['outofservice_instances']) * 100 / x['total_instances'],
                    'hwarn': '',
                    'hcrit': 100 - args.min_percent + 1,
                    'hmin': 0,
                    'hmax': 100} for x in states])

logging.debug('stats : %r' % stats)

if len(outofservice_elbs) > 0:
    if args.elb_health:
        at_risk_elbs=[]
        safe_elbs=[]
        for elb in outofservice_elbs:
            if elb['inservice_instances'] < args.min_instances or \
               (float(elb['inservice_instances']) / elb['total_instances']) < (float(args.min_percent) / 100):
                at_risk_elbs.append(elb)
            else:
                safe_elbs.append(elb)
        if len(at_risk_elbs) > 0:
            print "ELB CRITICAL - instance %s:%s is OutOfService in ELB%s %s. ELB%s %s are at risk because they have fewer than the safe number of InService instances (%s or %s%% of all instances). %s | %s" % \
                (args.ip[0], 
                 instance_id, 
                 's' if len(outofservice_elbs) > 1 else '',
                 ', '.join([x['name'] for x in outofservice_elbs]),
                 's' if len(at_risk_elbs) > 1 else '',
                 ', '.join([x['name'] for x in at_risk_elbs]),
                 args.min_instances,
                 args.min_percent,
                 ", ".join(["%s : %s/%s" % (x['name'], x['total_instances'] - x['outofservice_instances'], x['total_instances']) for x in at_risk_elbs]),
                 stats)
            exit(2)
        else:
            print "ELB WARNING - instance %s:%s is OutOfService in ELB%s %s however ELB%s %s are not at risk because they have a safe number of InService instances (%s and %s%% of all instances). %s | %s" % \
                (args.ip[0], 
                 instance_id, 
                 's' if len(outofservice_elbs) > 1 else '',
                 ', '.join([x['name'] for x in outofservice_elbs]),
                 's' if len(safe_elbs) > 1 else '',
                 ', '.join([x['name'] for x in safe_elbs]),
                 args.min_instances,
                 args.min_percent,
                 ", ".join(["%s : %s/%s" % (x['name'], x['total_instances'] - x['outofservice_instances'], x['total_instances']) for x in outofservice_elbs]),
                 stats)
            exit(1)
    else:
        if len(inservice_elbs) > 0:
            print "INSTANCE CRITICAL - instance %s:%s is InService in some ELBs (%s) and OutOfService in others (%s) | %s" % \
                (args.ip[0], 
                 instance_id, 
                 ', '.join([x['name'] for x in inservice_elbs]),
                 ', '.join([x['name'] for x in outofservice_elbs]),
                 stats)
        else:
            print "INSTANCE CRITICAL - instance %s:%s is OutOfService in all ELBs (%s) | %s" % \
                (args.ip[0], 
                 instance_id, 
                 ', '.join([x['name'] for x in outofservice_elbs]),
                 stats)
        exit(2)
elif len(inservice_elbs) == 0:
    print "UNKNOWN - instance %s:%s doesn't appear in any ELBs" % (args.ip[0], instance_id)
    exit(3)
else:
    print "INSTANCE OK - instance %s:%s is InService in all ELBs (%s) | %s" % \
        (args.ip[0], 
         instance_id, 
         ', '.join([x['name'] for x in inservice_elbs]),
         stats)
    exit(0)
